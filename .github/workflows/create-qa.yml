name: Deploy QA

on:
  issue_comment:
    types: [created]

env:
  RAILS_ENV: staging
  INFRA_ENV: nginx
  AWS_REGION: ap-northeast-1
  DOCKER_BUILDKIT: 1
  VPC_ID: vpc-073288b1bab4dd9c1
  STG_FAMILY: test-nginx
  QA_FAMILY: frontend-qa-task-def
  QA_REPOSITORY_URL: 572919087216.dkr.ecr.ap-northeast-1.amazonaws.com/nginx

jobs:
  # PRに `/deploy-qa` のコメントをしたとき、+1のリアクションをつけ、PRにQAラベルをつける。
  # 後続ジョブで使うためにPRの最新のshaを取得する。
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/deploy-qa')
    outputs:
      head_sha: ${{ steps.find-sha.outputs.result }}

    steps:
    - name: Create a reaction
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.reactions.createForIssueComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: context.payload.comment.id,
            content: "+1",
          });

    - name: Add QA label
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: [
              'QA',
            ],
          });

    - name: Find sha from pull request
      id: find-sha
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          const { data: pullRequest } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          return pullRequest.head.sha;
  # イメージをビルドする。
  # QA環境ではlatestイメージを更新しない。
  build_image:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [setup]

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.setup.outputs.head_sha }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build cache
      uses: docker/build-push-action@v5
      with:
        target: deps
        context: .
        build-args: |
          NODE_ENV=development
        cache-from: type=gha,scope=nuxt
        cache-to: type=gha,mode=max,scope=nuxt
    - name: Build and push
      env:
        IMAGE_TAG: ${{ needs.setup.outputs.head_sha }}
      uses: docker/build-push-action@v5
      with:
        push: true
        context: .
        build-args: |
          NODE_ENV=development
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/$INFRA_ENV:$IMAGE_TAG
        cache-from: type=gha,scope=nuxt

  # ポート番号が50000〜60000になるようにPR番号から計算し、deploymentを作成する。
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [setup, build_image]

    steps:
    - name: Create a deployment
      id: create_deploy
      uses: actions/github-script@v6
      with:
        previews: ant-man-preview
        result-encoding: string
        script: |
          const port = 50000 + context.issue.number % 10000;
          const ref = "${{ needs.setup.outputs.head_sha }}";
          const payload = {
            web_url: `https://frontend-qa.ava-intel.com:${port}`,
          };

          const { data: deployment } = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref,
            task: "deploy:migrations",
            environment: `qa-${port}`,
            auto_merge: false,
            payload,
          });
          return { deploymentId: deployment.id, port };

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create Target Group
      run: |
        TG_ARN=$(aws elbv2 create-target-group \
        --name ${{ steps.create_deploy.outputs.result.port }} \
        --protocol HTTP \
        --port ${{ steps.create_deploy.outputs.result.port }} \
        --vpc $VPC_ID \
        --target-type ip \
        --health-check-path '/' \
        --query 'TargetGroups[].TargetGroupArn' \
        --output text; true)
        aws elbv2 create-listener \
        --load-balancer-arn $LB_ARN \
        --protocol HTTPS \
        --port ${{ steps.create_deploy.outputs.result.port }} \
        --default-actions Type=forward,TargetGroupArn=$TG_ARN; true
       

      # --certificates CertificateArn=$VPC_ID \
      # --ssl-policy ELBSecurityPolicy-2016-08 \
      # staging環境のタスク定義を取得し、imageを差し替えたJSONを作成
    - name: Create Task Def
      run: |
        aws ecs describe-task-definition --task-definition $STG_FAMILY > desc-task-def.json
        cat desc-task-def.json |
        jq -c ".taskDefinition | del(.[\"taskDefinitionArn\", \"revision\", \"status\", \"requiresAttributes\", \"compatibilities\", \"registeredAt\", \"registeredBy\"]) |
        .family |= \"$QA_FAMILY\" |
        (.containerDefinitions[] | select(.name==\"ava-travel-nuxt-stg\") | .image) |= \"$QA_REPOSITORY_URL:${{ needs.setup.outputs.head_sha }}\"" > task-definition.json

    # stagingのECSサービスの設定を取得し、QA環境用に差し替えたJSONを作成
    - name: Register Task Def
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition \
        --cli-input-json file://task-definition.json \
        --query 'taskDefinition.taskDefinitionArn' \
        --output text)
        aws ecs describe-services \
          --cluster $STG_CLUSTER \
          --services $STG_SERVICE | jq -c '.services[0]' > desc-service.json
        cat desc-service.json |
          jq -c "del(.[\"serviceArn\", \"clusterArn\", \"roleArn\", \"status\", \"runningCount\", \"pendingCount\", \"deployments\", \"taskSets\", \"events\", \"createdAt\", \"createdBy\", \"propagateTags\", \"platformFamily\"]) |
            .cluster |= \"$QA_CLUSTER\" |
            .serviceName |= \"$DEPLOY_ENV\" |
            .taskDefinition |= \"$TASK_DEF_ARN\" |
            .loadBalancers[0].targetGroupArn |= \"$TG_ARN\" |
            .desiredCount |= 1 |
            .deploymentController.type |= \"ECS\"" > service.json

        ECS_SERVICE_STATUS=$(aws ecs describe-services \
          --cluster $QA_CLUSTER \
          --services $DEPLOY_ENV \
          --query 'services[].status' \
          --output text; true)

        # ECS Service のステータスが INACTIVE の場合は、削除途中で再作成不可状態にある為、処理停止
        if [ "$ECS_SERVICE_STATUS" == "INACTIVE" ]; then
          echo "The status of service $ECS_SERVICE is 'INACTIVE'. Please wait to finish deleting the ecs service."
          exit 1
        fi

    - name: Update Service
        # QA環境のECSサービスが存在しない場合は作成し、存在する場合はタスク定義のリビジョンを更新
      run: |
        if [ "$ECS_SERVICE_STATUS" == "" ]; then
          aws ecs create-service --cli-input-json file://service.json

          # QA環境の夜間停止の設定
          aws events put-rule --name "qa-$PORT-start" --schedule-expression "cron(0 21 ? * SUN-THU *)" # 平日06:00 JST
          aws events put-targets --rule "qa-$PORT-start" --targets $(jq -nc '.Id = "Target" |
            .Arn = "'$AUTOMATION_ARN':$LATEST" |
            .RoleArn = "'$EVENT_ROLE_ARN'" |
            .Input = "{\"AutomationAssumeRole\":[\"'$AUTOMATION_ROLE_ARN'\"],\"cluster\":[\"'$QA_CLUSTER'\"],\"service\":[\"'$DEPLOY_ENV'\"],\"desiredCount\":[\"1\"]}"
          ')

          aws events put-rule --name "qa-$PORT-stop"  --schedule-expression "cron(0 14 ? * MON-FRI *)" # 平日23:00 JST
          aws events put-targets --rule "qa-$PORT-stop" --targets $(jq -nc '.Id = "Target" |
            .Arn = "'$AUTOMATION_ARN':$LATEST" |
            .RoleArn = "'$EVENT_ROLE_ARN'" |
            .Input = "{\"AutomationAssumeRole\":[\"'$AUTOMATION_ROLE_ARN'\"],\"cluster\":[\"'$QA_CLUSTER'\"],\"service\":[\"'$DEPLOY_ENV'\"],\"desiredCount\":[\"0\"]}"
          ')
        else
          aws ecs update-service --cluster $QA_CLUSTER --service $DEPLOY_ENV --task-definition $TASK_DEF_ARN
        fi
